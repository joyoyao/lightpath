#user  nobody;
worker_processes  1;

error_log logs/error.log debug;

#pid        logs/nginx.pid;

events {
	worker_connections  1024;
}

http {
	include mime.types;
	default_type application/octet-stream;

	# Log settings
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for" "$upstream_addr" "$ssl_cipher" "$upstream_cache_status" $upstream_response_time $request_time failover:$http_x_proofpoint_failover $request_id';
	access_log  logs/access.log  main;

	sendfile on;
	tcp_nopush on;
	server_tokens off;
	keepalive_timeout  65;

	# Gzip settings
	gzip off;
	gzip_static  off;
	gzip_vary off;
	gzip_types application/atom+xml application/eot application/font application/font-sfnt application/javascript application/json application/ld+json application/manifest+json application/opentype application/otf application/pkcs7-mime application/rss+xml application/truetype application/ttf application/vnd.geo+json application/vnd.ms-fontobject application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-httpd-cgi application/x-javascript application/x-mpegurl application/x-opentype application/x-otf application/x-perl application/x-ttf application/x-web-app-manifest+json application/xhtml+xml application/xhtml+xml application/xml application/xml+rss font/eot font/opentype font/truetype font/otf font/ttf image/svg+xml image/x-icon text/cache-manifest text/css text/csv text/html text/javascript text/js text/plain text/richtext text/tab-separated-values text/x-component text/x-java-source text/x-script text/xml;

	# GeoIP module config
	geoip2 conf/maxmind/GeoLite2-Country.mmdb {
		auto_reload 5m;
		$geoip2_metadata_country_build metadata build_epoch;
		$geoip2_data_country_code default=US source=$remote_addr country iso_code;
		$geoip2_data_country_name country names en;
	}

	# resolver 1.1.1.1;
	resolver 127.0.0.11 ipv6=off;

	# Path to lua library
	lua_package_path '/usr/local/openresty/lualib/?.lua;;';

	# Turn on in production
	lua_code_cache off;
	lua_http10_buffering off;

	# Shared dictionaries
	lua_shared_dict mlcache_1 100m;
	lua_shared_dict mlcache_2 100m;
	lua_shared_dict mlcache_hit_1 100m;
	lua_shared_dict mlcache_miss_1 100m;
	lua_shared_dict mlcache_hit_2 100m;
	lua_shared_dict mlcache_miss_2 100m;
	lua_shared_dict mlcache_lock 100m;

	# Initialize modules for better performance
	init_by_lua_block {
		local config = require('sm.config')
		require('sm.init').run(config)
	}

	server {
		listen 80;
		listen 443 ssl http2;
		server_name _;

		ssl_certificate /usr/local/openresty/nginx/conf/ssl/localhost.crt;
		ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/localhost.key;

		resolver 127.0.0.11 ipv6=off;
		set $template_root /usr/local/openresty/lualib/sm/templates;

		location / {
			set $brotli_ok true;
			set $reason '';
			# set $image_compress false;

			lua_check_client_abort on;
			default_type text/plain;

			add_header 'Access-Control-Allow-Origin' '*';

			# Run service
			content_by_lua_block {
				local config = require('sm.config')
				require('sm.service').run(config)
			}

			# Set default headers
			header_filter_by_lua_block {
				-- Load compression library
				local compression = require 'sm.utils.compression'

				-- Default headers
				ngx.header['Server'] = 'CDN'
				ngx.header['X-Server-ID'] = 'NY-1'
				ngx.header['X-Request-ID'] = ngx.var.request_id
				
				-- Brotli compression
				if ngx.var.brotli_ok == 'true' then
					ngx.log(ngx.OK, 'brotli is turned on')
					local ok = compression.brotli_check(ngx.header['Content-Type'])

					if ok then
						local brotli = require 'brotli.encoder'
						local header = ngx.var.http_accept_encoding
						if header then
							if string.find(header, 'br') then
								ngx.header['Vary'] = 'accept-encoding'
								ngx.header['Content-Length'] = nil
								ngx.header['Content-Encoding'] = 'br'
								ngx.ctx.encoder = brotli:new()
							else
								ngx.var.brotli_ok = false
							end
						end
					end
				end
				-- elseif ngx.var.image_compress == 'true' then
				-- 	-- Image compression
				-- 	local ok = compression.image_check(ngx.header['Content-Type'])

				-- 	if not ok then
				-- 		ngx.var.image_compress = false
				-- 	end
				-- end
			}

			# Compression
			body_filter_by_lua_block {
				-- Brotli compression
				if ngx.var.brotli_ok == 'true' and ngx.ctx.encoder then
					local encoder = ngx.ctx.encoder

					ngx.arg[1] = encoder:compressStream(ngx.arg[1])

					if encoder:isFinished() then
						encoder:destroy()
						ngx.arg[2] = true
					end
				end
				-- elseif ngx.var.image_compress == 'true' then
				-- 	-- Loseless image compression
				-- 	local compression = require 'sm.utils.compression'

				-- 	ngx.arg[1] = compression.compress_image(ngx.arg[1])
				-- 	ngx.arg[2] = true
				-- end
			}

			# Log requests and measure statistics
			log_by_lua_block {
				-- local logger = require 'sm.utils.logger'

				-- local log = ngx.log
				-- local ERR = ngx.ERR

				-- local ok, err = logger.init('host.docker.internal', 514, 'tcp')

				-- if not ok then
				-- 	log(ERR, '[Logger] Failed to init logger: ' .. err)
				-- 	return 
				-- end

				-- local ok, err = logger.log_request()

				-- if not ok then
				-- 	log(ERR, '[Logger] Failed to log request: ' .. err)
				-- end

				ngx.log(ngx.OK, ngx.req)
			}
		}
	}

	server {
		listen 8080 ssl http2;
		server_name _;

		ssl_certificate /usr/local/openresty/nginx/conf/ssl/localhost.crt;
		ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/localhost.key;


		location /lab {
			alias /usr/local/openresty/nginx/conf/html/;
			index lab.html;
			try_files $uri $uri/ /lab.html;
		}

		location /video {
			alias /usr/local/openresty/nginx/conf/html/;
			index video.html;
			try_files $uri $uri/ /video.html;
		}

		location /files {
			#max_ranges 0;
			# autoindex on;
			alias /usr/local/openresty/nginx/conf/test_files/;
			# index fuckoffniggers;
		}

		location /image {
			proxy_pass https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTvmsJkeAttcEonPky-KRHKRnheHWl5qnv4Ih_Ky1DGYJu0o3el;
		}

		location /css {
			proxy_pass https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css;
		}
	}

}
